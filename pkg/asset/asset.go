// Package asset Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/catalog/zookeeper_generated.json
// template/apply/zookeeper.yaml
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCatalogZookeeper_generatedJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x97\x41\x4f\xdb\x4c\x10\x86\xef\xf9\x15\xa3\x3d\x13\xe4\xe4\xb3\x31\x1f\xc7\xa2\x1e\x52\x1a\x90\x4a\x54\x01\x15\xb2\xc6\xbb\x63\x33\xc2\xde\x35\xeb\x35\x12\xa0\xfc\xf7\x6a\x1d\x63\x27\x21\xed\xa1\xcd\xa1\x87\x70\x20\xde\x79\x5f\xef\x3e\x93\xc9\xc4\x93\xb7\x11\x80\x60\x25\xce\x40\xa8\x88\xe2\x93\x38\xca\x42\x4c\x23\x29\xd3\x08\xb3\xff\x68\x8a\x71\xf4\x7f\x84\xf1\xa9\x52\x4a\x1c\x79\xaf\xc6\x92\xbc\xfb\xd5\x98\x47\xa2\x8a\xec\x2a\xac\xa8\x96\x96\x2b\xc7\x46\x7b\xf5\xce\x98\x8b\x56\x05\xae\x01\x41\x92\x76\x16\x0b\x7e\x25\x05\x35\xd9\x67\x96\x04\x99\xb1\x50\x22\x6b\x87\xac\x59\xe7\x20\x8d\xce\x38\x6f\x2c\xfa\x3d\x80\x75\x66\x6c\xd9\x5e\x1f\x81\xc6\x92\x75\x7e\x04\x95\x35\xcf\xac\xbc\x59\x71\xed\x2c\xa7\x8d\xf3\x1b\xbe\x68\xf9\x60\x8d\xe6\xd7\xce\x8e\x5a\xad\x59\x73\x6b\x9a\xea\xfd\xd4\xfa\x78\x85\xeb\x30\xaf\xc5\x19\xfc\x18\x01\x00\x88\xad\x1d\x5a\xcb\x2a\x55\xd6\xb9\x18\x01\xdc\xb7\x37\xa5\xac\x15\xa6\x85\x4f\xdf\xd9\x86\xfa\x18\xeb\xbc\x4e\x2c\x39\xcb\xf4\xbc\xad\x57\x05\xea\xa4\xa9\x14\x3a\xda\x25\x0d\x10\x6f\xed\xff\xbe\x18\x27\x51\x30\x49\xb3\x34\x8c\x33\x19\x66\x2a\x95\xe9\xa9\xc2\x6c\x1a\xc7\x71\x26\x4f\xc2\x50\x4e\x3b\xc6\xb5\x82\x54\xe3\xe0\x38\x1a\x4f\x82\x69\x38\x9e\x8c\x83\x41\xdf\xaa\xcc\x20\x64\x96\xd6\x79\xda\xd8\x8e\x14\xdb\x78\x49\x0e\x15\x3a\x14\x67\x3d\xa8\x77\x37\x45\x41\x6e\xc8\xa1\x0b\x07\xc7\x51\x7f\x4a\x1b\xf0\x50\x5b\x91\xcd\x65\x20\xfa\xd5\xfd\x20\x08\x4d\xa4\x92\xa7\xc6\xb4\xe7\x7a\x9e\x4e\x5a\xf6\x5c\xb5\x7c\xa0\x12\xeb\x4d\xac\xae\xd6\x09\xeb\xda\xa1\x96\xb4\xa1\x02\x08\x69\x09\xdd\x76\xd4\x17\x04\x2d\x96\xe4\xc8\xd6\x1f\x34\x00\x71\x77\x75\x95\xcc\x2e\x67\x8b\xe4\xeb\x6c\x3e\x5b\xec\x70\xfc\xe6\xbd\xde\xb0\x64\xd8\x14\xce\xcb\x93\x60\x97\xc1\xd2\x53\xc3\x96\xd4\x66\xca\xef\x7f\xcb\xed\x3b\x5a\xae\x2f\xdf\xe7\xc9\xcd\xfc\x7a\x1f\x50\xd1\x64\xba\x5f\xaa\x9b\x7f\x8c\xea\xfa\xf6\xf2\x7c\x7f\x35\x8c\xf6\x85\xb5\x98\x9d\x5f\x24\x8b\xd9\xfc\xf3\x3e\xa8\xc2\x20\xf8\x93\xcf\xd6\xe8\x57\xab\x0d\x64\xb1\xfa\x3a\x3b\xf4\xcf\x4e\xa8\x43\xff\x1c\xfa\xe7\xc3\x6a\xb8\x5e\x83\xef\x9f\x53\xdd\x0c\x71\x78\x4c\x1d\xda\x6c\xa0\x3a\xb4\xd9\x5f\xb5\xd9\x68\xfd\x75\xd9\x8f\xf0\x1f\xe6\x58\xa1\xb8\xae\x0a\x7c\xb9\xec\xa6\xe8\xc5\x03\xc1\xb7\xe6\x96\xcf\x0b\xd3\x28\xb8\xee\x7e\xab\x7c\xb2\xe6\x91\xac\x1f\x52\x97\xa3\xe5\xcf\x00\x00\x00\xff\xff\xe5\x30\x29\x00\x33\x0d\x00\x00")

func templateCatalogZookeeper_generatedJsonBytes() ([]byte, error) {
	return bindataRead(
		_templateCatalogZookeeper_generatedJson,
		"template/catalog/zookeeper_generated.json",
	)
}

func templateCatalogZookeeper_generatedJson() (*asset, error) {
	bytes, err := templateCatalogZookeeper_generatedJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/catalog/zookeeper_generated.json", size: 3379, mode: os.FileMode(420), modTime: time.Unix(1562037770, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateApplyZookeeperYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func templateApplyZookeeperYamlBytes() ([]byte, error) {
	return bindataRead(
		_templateApplyZookeeperYaml,
		"template/apply/zookeeper.yaml",
	)
}

func templateApplyZookeeperYaml() (*asset, error) {
	bytes, err := templateApplyZookeeperYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/apply/zookeeper.yaml", size: 0, mode: os.FileMode(420), modTime: time.Unix(1561960010, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/catalog/zookeeper_generated.json": templateCatalogZookeeper_generatedJson,
	"template/apply/zookeeper.yaml":             templateApplyZookeeperYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"apply": &bintree{nil, map[string]*bintree{
			"zookeeper.yaml": &bintree{templateApplyZookeeperYaml, map[string]*bintree{}},
		}},
		"catalog": &bintree{nil, map[string]*bintree{
			"zookeeper_generated.json": &bintree{templateCatalogZookeeper_generatedJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
