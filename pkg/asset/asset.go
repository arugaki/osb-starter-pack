// Package asset Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// template/catalog/zookeeper_generated.json
// template/apply/zookeeper.yaml
package asset

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateCatalogZookeeper_generatedJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xd1\x4e\xdb\x30\x14\x7d\xef\x57\x58\x7e\x06\x94\xb4\x84\x16\xde\xba\x0a\x4d\x19\xb4\x4c\x24\x9a\x80\x09\x45\x37\xf1\x2d\xb5\x48\x9d\x60\x3b\x4c\x80\xfa\xef\x93\xd3\x2a\x4d\x43\x8a\x36\xa9\x9a\x56\xe1\x97\xb6\xb9\xe7\xda\x39\xe7\x38\x51\x8f\xec\xb7\x0e\x21\x94\x33\x7a\x46\x28\x9e\x4e\xbd\xee\xc0\x61\x5e\xaf\xd7\x07\x70\x06\xa7\xe0\x30\x16\xf7\x06\xe0\x76\x7b\xe0\x1d\x03\x3d\x30\xbd\x02\xe6\x68\xba\x5f\xb3\xec\x11\x31\x47\xb9\x2c\x33\x54\x89\xe4\xb9\xe6\x99\x30\xe8\x5d\x96\x5d\x94\x28\x49\xd2\x42\x69\x94\xe4\x17\xd7\x33\xa2\x67\x12\x91\xe4\x88\x52\x1d\x2d\xc7\x69\x78\x50\xf4\x8c\xfc\xec\x10\x42\x08\x55\x2f\x22\x99\xc9\x4c\xf0\x57\x28\x67\x3a\x58\x96\x05\xcc\xb9\x78\xa0\x1d\x42\xee\xcb\x41\x31\x17\x0c\xe2\xd4\xf0\xd0\xb2\xc0\xaa\xc6\xc5\x83\x8a\x24\x6a\xc9\xf1\xb9\x89\xe7\x29\x88\xa8\xc8\x19\x68\x6c\x83\xd6\x24\xde\xca\xcf\xca\x95\xe4\x84\x41\x3f\x71\x7b\x78\x82\xfd\xd8\x41\x0f\xe3\x53\x88\xfb\xdd\x5e\xdc\x77\xfb\x30\x98\xc6\x2b\x8e\x35\x67\xf2\x43\xe7\xc8\x3b\x74\x9d\xee\xf1\xa1\xbb\x46\x1b\x06\xad\x81\xa9\xc4\x3a\x9b\xb2\xd6\x22\xb0\xac\xcf\x51\x03\x03\x0d\xf4\xac\xa2\x69\xba\x8b\x34\x45\xbd\x56\xb0\x2a\x3b\x47\x5e\x75\x97\xb2\x60\x28\x35\x2a\xb4\xba\xba\x5f\x03\x54\x20\xb2\xe8\xa9\xc8\xca\x1b\x19\x02\x2b\x68\x51\x11\x51\xc9\x0c\xe7\xa0\x36\x79\x28\x94\xcf\x3c\xc1\x88\x0b\xa5\x41\x24\xb8\x81\x12\x42\x13\x89\xa0\x9b\x55\xe3\x3f\x48\x98\xa3\x46\xa9\xde\x61\x84\x50\x7f\x12\x84\xc3\xc9\xe8\x3c\x9a\x0c\xc7\xe7\x2d\x0d\x1f\x78\xbb\xd1\x32\x85\x22\xd5\xdb\x60\x89\x4f\x05\x97\xc8\x1a\x86\xd7\x3a\xf4\x4b\x5e\xae\xae\xd2\xd2\x3c\x8b\x2d\x1d\xc8\xb8\x5e\x2d\xda\x14\x52\xd5\x36\xc9\x33\x57\x9b\x3d\x8d\x96\x45\x73\x0c\x35\xa2\x83\xef\xc3\xd1\xe7\x53\x1e\x84\x57\xd7\xc3\xaf\xe7\xa3\xcb\x61\x10\xfc\x03\xf1\xdb\x88\xff\x95\xfa\x2d\x0e\xd6\xc5\xd7\x5e\xa7\xed\xda\xef\xae\xae\x22\x7f\xe2\x87\xd1\xa5\x3f\xf6\xc3\x5d\xa8\x77\x9d\xbd\x5a\x7c\x63\xc0\xb7\x1f\xe3\xe8\x66\xbc\x93\xb5\xf7\xdc\xee\x9e\xca\xbf\xf9\xac\xf2\x83\xdb\xc9\x68\x77\x8f\xbf\xb7\x77\xfa\x43\x7f\x74\x11\x85\xfe\x6e\xfe\xf2\x8e\x1d\xe7\xbf\x7e\xff\x3b\xdb\xae\x36\xbc\xa1\xcb\xf8\x66\x03\x84\x0d\x10\x36\x40\x7c\xac\xdd\x06\x08\x1b\x20\x6c\x80\xb0\x01\xc2\x06\x88\x4e\x8b\x4b\xd5\x4e\xc5\x6a\xd3\xc8\x6e\x54\x34\x5b\x6c\xce\xb0\x39\xc3\xe6\x0c\x9b\x33\xfe\x5c\xbe\xcd\x19\x36\x67\xd8\x9c\x51\xfb\xb5\xfc\x5e\x54\x87\x56\xef\xce\x6e\x28\xe3\x2a\x4f\xe1\x65\xb2\x3a\x37\x0a\x67\x48\xae\x8b\x5b\x3e\x4a\xb3\x82\x91\x60\x19\x51\xc8\x17\x99\x3d\xa2\xa4\x1d\x33\xd5\xe2\x77\x00\x00\x00\xff\xff\xcc\x2e\xab\x65\xae\x1b\x00\x00")

func templateCatalogZookeeper_generatedJsonBytes() ([]byte, error) {
	return bindataRead(
		_templateCatalogZookeeper_generatedJson,
		"template/catalog/zookeeper_generated.json",
	)
}

func templateCatalogZookeeper_generatedJson() (*asset, error) {
	bytes, err := templateCatalogZookeeper_generatedJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/catalog/zookeeper_generated.json", size: 7086, mode: os.FileMode(420), modTime: time.Unix(1562218161, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateApplyZookeeperYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\xdf\x6f\xe2\x38\x10\x7e\xe7\xaf\xb0\x78\x3e\xda\x23\x79\x41\x91\xee\x01\x51\xb4\xca\x6d\xa1\x1c\xb0\xbd\x76\x5f\x90\xeb\x4c\xa9\x55\xc7\xf6\xd9\x0e\xb7\x1c\xca\xff\x7e\x72\x12\x9a\x5f\xb4\xa5\x2b\x60\xdb\x2a\x79\x6a\xe3\x99\x6f\xc6\xf3\x79\x26\x5f\x02\x96\xf4\x1a\x94\xa6\x82\x7b\x08\x4b\xa9\xcf\x57\xdd\x3b\x30\xb8\xdb\x7a\xa4\x3c\xf0\xd0\x05\x48\x26\xd6\x21\x70\xd3\x0a\xc1\xe0\x00\x1b\xec\xb5\x10\xe2\x38\x04\x0f\x6d\x36\xe8\xcc\xe7\xda\x60\x4e\x60\x8c\x43\x40\x71\xdc\xf9\x4f\x88\x47\x00\x09\xea\xf7\x6e\x66\xa7\x25\x26\x99\xf1\x78\xfb\x2f\x8a\xe3\x16\x42\x0c\xdf\x01\xd3\x16\x0f\x21\xb3\x96\xe0\xa1\x27\xef\xe4\x1e\x96\x72\x9f\x20\x08\xa9\x68\x4d\xd7\x11\x3f\xd3\xa0\x56\x94\xc0\x9d\x12\x8f\xa0\xce\x69\xe6\x55\xc6\xf0\x03\x1b\x5c\x4b\x20\x36\xb0\x02\xc9\x28\xc1\xda\x43\x16\xc9\x40\x28\x19\x36\x90\xa6\x54\xdc\xb0\xbd\x8a\xe9\x3e\x97\xf2\x9b\xd2\xfe\xb9\xd4\xad\xd7\x36\xfd\x24\xdc\xfd\x3d\xe5\xd4\xac\xf3\xc4\xa4\x08\xfa\xdc\xd0\x7e\x6d\xc1\xee\xf7\x9f\x88\x2a\x08\x2e\x22\x45\xf9\x72\x46\x1e\x20\x88\x18\xe5\x4b\x7f\xc9\xc5\xd3\xed\xe1\x0f\x20\x91\xb1\x47\xa2\xe0\xd9\x49\xf7\x3f\x03\x06\xc4\x08\x55\x5c\x4a\x8a\x85\x0d\x79\x18\xfe\x90\x0a\xb4\x3d\x4c\xba\xba\xde\x41\x8f\xb0\xf6\x92\x9a\x55\x56\x10\x12\x12\x14\xb6\x98\xc8\xe7\xb5\xc5\x15\x66\x11\xd4\xe0\x2c\x60\xbd\xf2\x09\x2b\x42\x0a\x26\x96\xeb\xaf\x36\x5c\xfb\x31\xba\x03\xc5\xc1\x80\x3e\xa3\xe2\xfc\x41\x68\x63\x8f\x64\x3b\xf3\x20\x82\x1b\x4c\x39\xa8\x27\xfc\x4e\x76\xb4\xeb\xd8\x34\xc4\x4b\x98\x44\x8c\x4d\x04\xa3\x64\xed\x21\xff\x7e\x2c\xcc\x44\x81\xb6\xcd\x51\xb2\xf2\x50\x80\x05\x61\x22\x0a\x6c\xd0\xed\xdf\xe7\x4f\x98\x9e\x5e\x86\xf9\x09\x58\x09\x16\x85\x30\x12\x11\x37\x85\x6d\x6e\x13\xb1\x07\xb0\xb0\xbf\xd0\x9a\x4d\xb0\x79\xf0\x50\xfb\xdc\xae\xb5\x6b\x1e\x4c\x2c\x5f\x72\x60\x62\x99\xfb\x00\x5f\x55\x43\x22\x0f\x7d\xbf\xba\x5a\x8c\x6e\x17\xfe\x45\xab\x42\x83\x87\xda\xdd\x6a\xc0\xcc\x7e\xee\x0f\xbe\x2e\xe6\xfe\x68\xb8\xc3\xc7\x9e\xe1\x92\x0d\x8a\xe3\x67\x60\xfc\xb1\x3f\x5f\x5c\xfa\x23\x7f\xfe\x02\x4e\x6e\xf4\x3c\xd0\xec\x76\x3c\x78\x15\x28\x37\x7a\x1e\xe8\xcf\xeb\xd1\xe2\x66\x34\x7b\x01\x25\xb3\x78\x0d\xe2\xe6\x55\x88\x9b\x17\xb6\x33\x9c\x5e\x0f\xa7\xbb\xb2\xb0\x83\x03\xd4\x59\xf7\x8f\x04\x2b\x9f\x30\x28\x8e\x3d\xa7\xd7\xeb\x79\x6e\xaf\xd7\xfb\x2d\xb3\x72\x2a\x56\xce\x4e\x2b\xb7\x62\xe5\x96\xac\xf2\x0c\x15\x68\x11\x29\x52\xee\x4e\x3b\x61\x40\x9b\x4a\xc7\x12\x19\xa5\xb3\x6c\x72\xd9\x1f\x2f\xa6\xc3\xbf\xbe\x0d\x67\xf3\xc5\x60\xf2\x0d\xc5\x31\x29\x59\x86\x10\x0a\xb5\xde\x61\x3c\x1a\x8e\xae\xa6\xb7\x28\x8e\x47\xb4\xe0\xc0\x68\x48\x5f\x0e\x96\xf0\xbb\x5f\xa8\xd4\xb4\x1e\x48\x81\x36\x58\x99\x6d\xe7\xf7\xd9\xbf\x78\xad\xb3\xb5\xb4\x7d\x6b\x03\xa4\xd4\xb7\xd2\x3e\x61\xb5\x01\x6e\xae\x13\xeb\x01\xc3\x34\x2c\xe6\x4c\xec\x8d\xf1\x3e\x0f\xd5\x4e\x01\x78\x57\xc7\x1f\x32\x54\x8e\xcb\x45\x00\xf5\xc9\x9f\x0f\x34\xd4\x36\x2a\x82\x76\xab\xd3\xe9\xb4\x8e\xa7\x28\x9c\x53\x28\x0a\xe7\x63\x2a\x0a\xa7\x51\x14\x85\xab\x51\x14\x1f\x47\x51\x38\x8d\xa2\x68\x14\x45\x76\x35\x8a\xe2\xe4\x8a\xc2\x39\x9d\xa2\x70\xde\x9d\xa2\x70\x4f\xa1\x28\xdc\x8f\xa9\x28\xdc\x46\x51\x14\xae\x46\x51\x7c\x1c\x45\xe1\x36\x8a\xa2\x51\x14\xd9\xd5\x28\x8a\x93\x2b\x0a\xf7\x74\x8a\xc2\x3d\x80\xa2\x58\x6d\x75\xc4\x2c\x7d\xbc\x1d\xf9\x87\x8e\x13\xfc\xa8\x21\x85\x4a\x8f\x5b\x27\xf9\xd3\x43\xb6\x2f\x12\xcc\x8c\x0b\xc0\x41\xf6\xd4\x90\x4a\x18\x41\x04\xf3\xd0\x7c\x30\x49\x45\x0e\x56\x4b\x30\x93\xa2\xdf\x16\xc6\x2d\xc3\x10\x16\x69\xb3\x17\x4e\xe6\x98\x8a\x91\x41\xea\xe6\x5b\x33\x5d\xe2\x6b\xaf\xd2\x1c\x9c\xbe\xb7\x7d\x55\x3a\xc1\x17\xa4\x4f\x4c\x9f\x73\x78\xfa\xde\x26\xe1\x4f\x20\xd7\x3f\x31\x7d\xee\x11\x86\x67\x47\x48\xe0\x07\x9f\xa0\x5b\xd4\xc3\x12\xd9\xed\x75\x4b\x0c\xd0\xad\xac\x7e\x85\xc8\xd4\x2f\x25\x60\x2c\x02\xb0\xb7\xdf\xcb\xf4\x3b\x4a\xfd\x9d\xcf\x59\xff\x63\x8c\xaf\xa3\xd4\xdf\xfd\x9c\xf5\x4f\xe7\x4f\x5a\xf0\xc9\x2e\x11\x59\xe5\xe6\xed\xd3\x28\x93\xae\xfb\xb3\xf1\xf3\xf5\xdd\x6c\x10\xbd\x47\x5c\x98\x4c\xd9\xcf\xe6\x57\xd3\xfe\x97\xe1\x62\x70\xd9\x9f\xcd\xd2\x40\xda\x08\x85\x97\x76\x6f\x5a\xe7\x7a\xf8\x39\xeb\xcd\x06\x01\xcf\xbe\xbf\x60\x42\x40\xeb\x91\x08\x20\xa3\x70\x0a\x38\xf8\x5b\x51\x03\x57\x9c\x40\xab\xf6\x62\x54\x7d\x25\xca\x22\xef\x08\x38\xf3\xbf\xdb\x97\xe3\x2f\xf4\xf8\x64\xa4\xe2\xbe\xe1\xe2\xd7\x73\xe1\x34\x8d\xf1\x9e\xc8\x68\x1a\xe3\xbd\x70\xe1\x36\x8d\xf1\x9e\xc8\x68\x1a\x63\x5f\x2e\xfe\x0f\x00\x00\xff\xff\x1a\xe5\x9d\xd7\xf9\x2b\x00\x00")

func templateApplyZookeeperYamlBytes() ([]byte, error) {
	return bindataRead(
		_templateApplyZookeeperYaml,
		"template/apply/zookeeper.yaml",
	)
}

func templateApplyZookeeperYaml() (*asset, error) {
	bytes, err := templateApplyZookeeperYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template/apply/zookeeper.yaml", size: 11257, mode: os.FileMode(420), modTime: time.Unix(1562218149, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template/catalog/zookeeper_generated.json": templateCatalogZookeeper_generatedJson,
	"template/apply/zookeeper.yaml":             templateApplyZookeeperYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"template": &bintree{nil, map[string]*bintree{
		"apply": &bintree{nil, map[string]*bintree{
			"zookeeper.yaml": &bintree{templateApplyZookeeperYaml, map[string]*bintree{}},
		}},
		"catalog": &bintree{nil, map[string]*bintree{
			"zookeeper_generated.json": &bintree{templateCatalogZookeeper_generatedJson, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
